name: Rust

on:
    push:
        branches: [main]
        paths-ignore:
            - ".gitignore"
            - ".git-blame-ignore-revs"
    pull_request:
        branches: [main]
        paths-ignore:
            - ".gitignore"
            - ".git-blame-ignore-revs"

env:
    CARGO_TERM_COLOR: always
    RUSTFLAGS: "--cfg ci"

jobs:
    check:
        name: Check
        runs-on: ubuntu-latest
        env:
            RUSTFLAGS: "-Dwarnings --cfg ci"
            RUST_BACKTRACE: 1
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Cache the Cargo build files
              uses: Leafwing-Studios/cargo-cache@v2
              with:
                  cache-group: check
                  save-if: ${{ github.event_name != 'pull_request' }}

            - name: Cargo check
              run: cargo build --all-features

    test:
        name: Test
        runs-on: ${{ matrix.os }}
        env:
            RUST_BACKTRACE: 1
        needs: check
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly] #[stable, beta, nightly]
                include:
                    - os: windows-latest
                      toolchain: nightly
                    - os: macos-latest
                      toolchain: nightly
        permissions:
            checks: write
        steps:
            # The fact that we even have to do this is absurd.
            - name: Free disk space
              if: matrix.os == 'ubuntu-latest'
              run: |
                  set -ex
                  df -h
                  sudo swapoff -a
                  sudo rm -f /swapfile
                  sudo apt clean
                  docker rmi $(docker image ls -aq) || true
                  sudo rm -rf \
                    "$AGENT_TOOLSDIRECTORY" \
                    /opt/google/chrome \
                    /opt/microsoft/msedge \
                    /opt/microsoft/powershell \
                    /opt/pipx \
                    /usr/lib/mono \
                    /usr/local/julia* \
                    /usr/local/lib/android \
                    /usr/local/lib/node_modules \
                    /usr/local/share/chromium \
                    /usr/local/share/powershell \
                    /usr/share/dotnet \
                    /usr/share/swift
                  df -h

            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Install ${{ matrix.toolchain }} toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: ${{ matrix.toolchain }}

            - name: Cache the Cargo build files
              if: github.event_name != 'pull_request'
              uses: Leafwing-Studios/cargo-cache@v2
              with:
                  cache-group: test-${{ matrix.os }}-${{ matrix.toolchain }}
                  save-if: ${{ github.event_name != 'pull_request' }}

            - name: Install cargo-hack
              uses: taiki-e/install-action@v2
              with:
                  tool: cargo-hack

            - name: Cargo test
              id: tests
              run: cargo hack --feature-powerset --keep-going test --no-fail-fast --workspace --exclude-features default

            # - name: Cargo test
            #   id: tests
            #   run: cargo hack --feature-powerset --keep-going test --message-format=json --no-fail-fast --workspace --exclude-features default > tests.json

            # - name: Cargo test (with output on failure)
            #   run: cargo hack --feature-powerset --keep-going test --no-fail-fast --workspace --exclude-features default
            #   if: failure() && steps.tests.outcome == 'failure'

            # - name: Cargo metadata
            #   id: metadata
            #   run: cargo metadata --format-version 1 > metadata.json
            #   if: always()

            # - name: Create test annotations
            #   if: always()
            #   uses: ilyvion/cargo-test-annotations@master
            #   with:
            #       metadata: "metadata.json"
            #       tests: "tests.json"
            #       token: ${{ secrets.GITHUB_TOKEN }}
            #       name: cargo-test-annotations (${{ matrix.os }}, ${{ matrix.toolchain }})

    style:
        name: Check Style
        runs-on: ubuntu-latest
        needs: check
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Install nightly toolchain
              uses: dtolnay/rust-toolchain@nightly
              with:
                  components: clippy, rustfmt

            - name: Cache the Cargo build files
              uses: Leafwing-Studios/cargo-cache@v2
              with:
                  cache-group: check
                  save-if: ${{ github.event_name != 'pull_request' }}

            - name: Install cargo-hack
              uses: taiki-e/install-action@v2
              with:
                  tool: cargo-hack

            - name: Run cargo fmt
              run: cargo fmt --all -- --check

            - name: Run cargo clippy
              run: cargo hack --feature-powerset clippy --all-targets --exclude-features default -- -D warnings

    coverage:
        name: Report coverage
        runs-on: ubuntu-latest
        needs: [style, docs, test]
        if: github.event_name != 'pull_request'
        container:
            image: xd009642/tarpaulin:develop-nightly
            options: --security-opt seccomp=unconfined

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # XXX: container is missing 'jq' used by action
            # - name: Cache the Cargo build files
            #   uses: Leafwing-Studios/cargo-cache@v2
            #   with:
            #       cache-group: check

            - name: Generate code coverage
              run: |
                  cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: true

    docs:
        name: Documentation
        runs-on: ubuntu-latest
        needs: check
        if: github.event_name != 'pull_request'
        permissions:
            contents: write
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - name: Install Rust
              uses: dtolnay/rust-toolchain@nightly
              with:
                  components: clippy, rustfmt

            - name: Cache the Cargo build files
              uses: Leafwing-Studios/cargo-cache@v2
              with:
                  cache-group: documentation

            - name: Build documentation
              run: cargo doc -Zunstable-options -Zrustdoc-scrape-examples --no-deps --all-features --workspace
              env:
                  RUSTDOCFLAGS: --cfg docsrs

            - name: Finalize documentation
              run: |
                  CRATE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -f2 -d"/")
                  echo "<meta http-equiv=\"refresh\" content=\"0; url=${CRATE_NAME/-/_}\">" > target/doc/index.html
                  touch target/doc/.nojekyll

            - name: Upload as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: Documentation
                  path: target/doc

            - name: Deploy
              uses: JamesIves/github-pages-deploy-action@v4
              with:
                  folder: target/doc
